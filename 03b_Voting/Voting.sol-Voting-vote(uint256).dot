digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(proposalIndex < proposals.length,The specified proposal does not exist)

IRs:
REF_9 -> LENGTH proposals
TMP_10(bool) = proposalIndex < REF_9
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,The specified proposal does not exist)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentVoter = voters[msg.sender]

IRs:
REF_10(Voting.Voter) -> voters[msg.sender]
currentVoter(Voting.Voter) := REF_10(Voting.Voter)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(currentVoter.isAllowedToVote,Has no right to vote)

IRs:
REF_11(bool) -> currentVoter.isAllowedToVote
TMP_12(None) = SOLIDITY_CALL require(bool,string)(REF_11,Has no right to vote)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
currentVoter.hasAlreadyVoted

IRs:
REF_12(bool) -> currentVoter.hasAlreadyVoted
CONDITION REF_12"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert UserHasAlreadyVoted(address)(msg.sender)

IRs:
TMP_13(None) = SOLIDITY_CALL revert UserHasAlreadyVoted(address)(msg.sender)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
currentVoter.hasAlreadyVoted = true

IRs:
REF_13(bool) -> currentVoter.hasAlreadyVoted
REF_13(bool) (->currentVoter) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
currentVoter.vote = proposalIndex

IRs:
REF_14(uint256) -> currentVoter.vote
REF_14(uint256) (->currentVoter) := proposalIndex(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
proposals[proposalIndex].voteCount += 1

IRs:
REF_15(Voting.Proposal) -> proposals[proposalIndex]
REF_16(uint256) -> REF_15.voteCount
REF_16(-> proposals) = REF_16 (c)+ 1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
UserHasVoted(msg.sender,proposalIndex)

IRs:
Emit UserHasVoted(msg.sender,proposalIndex)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyBefore(electionEndTime)

IRs:
MODIFIER_CALL, Voting.onlyBefore(uint256)(electionEndTime)"];
11->1;
}
