digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
p = 0

IRs:
p(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
p < proposals.length

IRs:
REF_17 -> LENGTH proposals
TMP_16(bool) = p < REF_17
CONDITION TMP_16"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
proposals[p].voteCount > winningVoteCount

IRs:
REF_18(Voting.Proposal) -> proposals[p]
REF_19(uint256) -> REF_18.voteCount
TMP_17(bool) = REF_19 > winningVoteCount
CONDITION TMP_17"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
winningVoteCount = proposals[p].voteCount

IRs:
REF_20(Voting.Proposal) -> proposals[p]
REF_21(uint256) -> REF_20.voteCount
winningVoteCount(uint256) := REF_21(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
winningProposalIndex = proposals[p].proposalIndex

IRs:
REF_22(Voting.Proposal) -> proposals[p]
REF_23(uint256) -> REF_22.proposalIndex
winningProposalIndex(uint256) := REF_23(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
p ++

IRs:
TMP_18(uint256) := p(uint256)
p(uint256) = p (c)+ 1"];
9->4;
}
