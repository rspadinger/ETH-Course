digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
electionHasEnded

IRs:
CONDITION electionHasEnded"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert EndElectionAlreadyCalled()()

IRs:
TMP_19(None) = SOLIDITY_CALL revert EndElectionAlreadyCalled()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
electionHasEnded = true

IRs:
electionHasEnded(bool) := True(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
(winningProposalIndex,winningVoteCount) = winningProposal()

IRs:
TUPLE_0(uint256,uint256) = INTERNAL_CALL, Voting.winningProposal()()
winningProposalIndex(uint256)= UNPACK TUPLE_0 index: 0 
winningVoteCount(uint256)= UNPACK TUPLE_0 index: 1 "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ElectionEnded(winningProposalIndex,winningVoteCount)

IRs:
Emit ElectionEnded(winningProposalIndex,winningVoteCount)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Voting.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyAfter(electionEndTime)

IRs:
MODIFIER_CALL, Voting.onlyAfter(uint256)(electionEndTime)"];
10->1;
}
